<?php namespace ProcessWire;
class ResponsiveImage extends WireData implements Module {
    public static function getModuleInfo() {
        return array(
            'title' => 'ResponsiveImage',
            'version' => 100,
            'summary' => 'Einfache Erstellung von Responsive-optimiertem HTML-Code für Bilder und Hintergrundbilder',
            //'href' => 'https://processwire.com',
            'icon' => 'picture-o',

            // Nur eine Instanz, da wir Hooks benutzen
            'singular' => true,

            // Modul soll direkt mit Processwire gestartet werden
            'autoload' => true,
        );
    }

    private $backgroundImageCounter = 0;
    private $backgroundImageArray = array();
    private static $useModule = true;
    private static $defaultResizeQuality = 90;
    private static $defaultSizeArray = array(
        'xl' => 1920,
        'lg' => 1600,
        'md' => 1200,
        'sm' => 992,
        'xs' => 768
    );

    /**
     * Initialisierungsteil
     *
     * Hier werden den Seiten-Elementen (Page) und Bildern (Pageimage) neue Funktionen verliehen und definiert.
     */
    public function init() {
        $this->addHook('Pageimage::responsiveImage', $this, 'responsiveImage');
        $this->addHook('Pageimage::responsiveBackground', $this, 'responsiveBackground');
        $this->addHook('Page::getResponsiveCSS', $this, 'getResponsiveCSS');
        //todo: Hooks erklären
    }

    /**
     * Neue Funktion for Bilder
     *
     * Diese Funktion gibt angepassten HTML-Code für Bilder zurück. Falls das Modul mit der Funktion disable()
     * temporär deaktiviert wurde, wird Standard-Code zurückgegeben.
     *
     * @param $event
     */
    public function responsiveImage($event) {
        //todo $event-System erklären
        $image = $event->object;
        $options = $event['arguments'][0];

        $attributes = $this->createAttributeString($event['arguments'][1]);
        //todo beispiele für argumente geben

        if ($this->isModuleEnabled()) {
            $srcset = $this->createSrcset($image, $options);
            $return =
                '<img ' .
                'src="'. $image->url . '" ' .
                'srcset="' . $srcset . '" ' .
                $attributes.
                '>';
        } else {
            $return = '<img src="'. $image->url . '" ' . $attributes. '>';
        }

        $event->return = $return;
    }

    /**
     * Hintergrundbilder
     *
     * Hier werden durchnummerierte CSS-Klassen erstellt, gesammelt und einzeln zurückgegeben.
     * Diese werden später zusammen durch getResponsiveCSS() ausgegeben und mit Eigenschaften versehen.
     *
     * @param $event
     */
    public function responsiveBackground($event){
        $image = $event->object;
        $options = $event['arguments'][0];

        $return = 'background-image-'. $this->backgroundImageCounter;

        $this->backgroundImageArray[$this->backgroundImageCounter] = $image;
        $this->backgroundImageArray[$this->backgroundImageCounter]['options'] = $options;
        $this->backgroundImageArray[$this->backgroundImageCounter]['keyCSS'] = $this->backgroundImageCounter;

        $this->backgroundImageCounter++;

        $event->return = $return;
    }

    /**
     * @param $event
     */
    public function getResponsiveCSS($event){
        $return = '';

        if ($this->backgroundImageCounter > 0 ) {
            $return .= "\n".'<style type="text/css">'."\n";
            foreach ($this->backgroundImageArray as $key => $image) {
                $return .= 'div.background-image-'. $key .' { background-image: url('. $image->url .'); }'."\n";
                if ($this->isModuleEnabled()) {
                    $return .= $this->createMediaQueries($image);
                }

            }
            $return .= "\n".'</style>'."\n";
        }
        $event->return = $return;
    }

    private function createSrcset($image, $options){
        $return = self::$defaultSizeArray;
        $baseImage = $image;
        $resizeOptions = array('quality'=>self::$defaultResizeQuality);

        foreach ($return as $key => $value) {
            if ( isset($options[$key]) && is_numeric($options[$key])) {
                if ($options[$value]<$baseImage) {
                    $i = $image->size($options[$key], 0, $resizeOptions);
                    $return[$key] = $i->url . ' ' . $i->width . 'w';
                } else {
                    $return[$key] = $baseImage->url . ' ' . $baseImage->width . 'w';
                }
            } elseif (isset($options[$key]) && $options[$key] == false) {
                //todo: bilder komplett ausblenden bei false
            } elseif ( !isset($options[$key]) ) {
                $i = $image->size($options[$key], 0, $resizeOptions);
                $return[$key] = $i->url . ' ' . $i->width . 'w';
            } elseif ( isset($options[$key]) && is_object($options[$key])) {
                $baseImage = $options[$key];
                $return[$key] = $baseImage->url . ' ' . $baseImage->width . 'w';
            }
        }
        return implode(', ', $return);
    }

    private function createMediaQueries($image){
        $return = self::$defaultSizeArray;
        $baseImage = $image;
        $resizeOptions = array('quality'=>self::$defaultResizeQuality);
        $options = $image['options'];
        $keyCSS = $image['keyCSS'];

        foreach ($return as $key => $value) {
            if ( isset($options[$key]) && is_numeric($options[$key])) {
                if ($options[$value]<$baseImage) {
                    $i = $image->size($options[$key], 0, $resizeOptions);
                    //$return[$key] = $i->url . ' ' . $i->width . 'w';
                    $return[$key] = $this->createMediaQueryString($keyCSS, $i->width, $i->url);
                } else {
                    //$return[$key] = $baseImage->url . ' ' . $baseImage->width . 'w';
                    $return[$key] = $this->createMediaQueryString($keyCSS, $baseImage->width, $baseImage->url);
                }
            } elseif (isset($options[$key]) && $options[$key] == false) {
                $return[$key] = "\n".'@media (max-width: '. $return[$key] .'px) {'. "\n".
                    '  div.background-image-'. $keyCSS .' { background-image: none; }'."\n".
                    '}' . "\n";

            } elseif ( !isset($options[$key]) ) {
                $return[$key] = $this->createMediaQueryString($keyCSS, $return[$key], $baseImage->url);
            } elseif ( isset($options[$key]) && is_object($options[$key])) {
                $baseImage = $options[$key];
                $return[$key] = $this->createMediaQueryString($keyCSS, $baseImage->width, $baseImage->url);
            }
        }

        return implode("\n", $return);
    }

    private function createMediaQueryString($keyCSS, $width, $url){
        return "\n".'@media (max-width: '. $width .'px) {'. "\n".
        '  div.background-image-'. $keyCSS .' { background-image: url('. $url .'); }'."\n".
        '}';
    }

    private function createAttributeString($attributes){
        return implode(" ", $attributes);
    }

    /**
     *
     */
    public static function disable(){
        self::$useModule = false;
    }

    /**
     *
     */
    public static function enable(){
        self::$useModule = true;
    }

    /**
     * @return bool
     */
    public static function isModuleEnabled(){
        return self::$useModule;
    }

}

