<?php namespace ProcessWire;

class ResponsiveImage extends WireData implements Module {
	public static function getModuleInfo() {

		return array(

			'title' => 'ResponsiveImage',
			'version' => 100,
			'summary' => 'Einfache Erstellung von Responsive-optimierten img-tags .',
			//'href' => 'https://processwire.com',
            'icon' => 'picture-o',

            // Nur eine Instanz, da wir Hooks benutzen
            'singular' => true,

            // autoload=true: indicates the module should be started with ProcessWire.
            'autoload' => true,

			);
	}

	public function init() {

        $this->addHook('Page::noResponsiveImage', $this, 'noResponsiveImages');
        $this->addHook('Pageimage::responsiveImage', $this, 'responsiveImage');
        $this->addHook('Pageimage::responsiveBackground', $this, 'responsiveBackground');
        $this->addHook('Page::getResponsiveCSS', $this, 'getResponsiveCSS');

	}


   public function responsiveImage($event) {

        $image = $event->object;
        $attributes = $this->createAttributeString($event['arguments'][1]);

       if ($this->isModuleEnabled()) {
           $srcset = $this->createSrcset($image, $event['arguments'][0]);
           $return =
                '<img ' .
                'src="'. $image->url . '" ' .
                'alt="' . $image->width . "x" . $image->height . '"' .
                'srcset="' . $srcset . '" ' .
                $this->createAttributeString($attributes).
                '>';
        } else {
            $return = '<img src="'. $image->url . '" alt="' . $image->width . "x" . $image->height . '"' . $this->createAttributeString($attributes). '>';
        }


       //$event->return = '** '. var_dump($event); die() . '**';
        $event->return = $return;
        //$event->return = '** '. $event->object->url . '**';
    }

    public function responsiveBackground($event){
        $return = '';
        $event->return = $return;
    }

    public function getResponsiveCSS($event){
        $return = '';
        $event->return = $return;
    }

    private function createSrcset($image, $options){

        $return = $this->defaultSizeArray;
        $baseImage = $image;
        $resizeOptions = array('quality'=>$this->imageQuality);

        foreach ($return as $key => $value) {
            if (isset($options[$key]) && is_numeric($options[$key])) {
                if ($options[$value]<$baseImage) {
                    $i = $image->size($options[$key], 0, $resizeOptions);
                    $return[$key] = $i->url . ' ' . $i->width . 'w';
                } else {
                    $return[$key] = $baseImage->url . ' ' . $baseImage->width . 'w';
                }

            } elseif (isset($options[$key]) && $options[$key] == false) {
                $i = $image->size($options[$key], 0, $resizeOptions);
                $return[$key] = $i->url . ' ' . $i->width . 'w';

            } elseif (!isset($options[$key]) ) {
                $i = $image->size($options[$key], 0, $resizeOptions);
                $return[$key] = $i->url . ' ' . $i->width . 'w';

            } elseif (isset($options[$key]) && is_object($options[$key])) {
                $baseImage = $options[$key];
                $return[$key] = $baseImage->url . ' ' . $baseImage->width . 'w';

            }
        }

        //var_dump($return);
        return implode(', ', $return);
    }

    private function createAttributeString($attributes){
        return implode(" ", $attributes);
    }

    private static $useModule = true;
    private static $imageQuality = 1;
    private static $defaultSizeArray = array(
        'xl' => 1920,
        'lg' => 1600,
        'md' => 1200,
        'sm' => 992,
        'xs' => 768
    );

    public static function disable(){
        self::$useModule = false;
    }

    public static function enable(){
        self::$useModule = true;
    }

    public static function isModuleEnabled(){
        return self::$useModule;
    }

}

