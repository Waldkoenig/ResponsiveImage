<?php namespace ProcessWire;

class ResponsiveImage extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			'title' => 'ResponsiveImage',
			'version' => 100,
			'summary' => 'Einfache Erstellung von Responsive-optimierten img-tags .',
			//'href' => 'https://processwire.com',
            'icon' => 'picture-o',

            // Nur eine Instanz, da wir Hooks benutzen
            'singular' => true,

            // autoload=true: indicates the module should be started with ProcessWire.
            // This is necessary for any modules that attach runtime hooks, otherwise those
            // hooks won't get attached unless some other code calls the module on it's own.
            // Note that autoload modules are almost always also 'singular' (seen above).
            'autoload' => true,

			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

        $this->addHook('Page::noResponsiveImage', $this, 'noResponsiveImages');
        $this->addHook('Pageimage::responsiveImage', $this, 'responsiveImage');
        $this->addHook('Pageimage::responsiveBackground', $this, 'responsiveBackground');
        $this->addHook('Page::getResponsiveCSS', $this, 'getResponsiveCSS');

	}


   public function responsiveImage($event) {

        if (!$this->useModule()) {
            return "Modul deaktiviert"; //todo: standardbild ausliefern
        }
        $image = $event->object;
        $attributes = $this->createAttributeString($event['arguments'][1]);

       $srcset = $this->createSizeArray($event['arguments'][0]);
       $srcset = $this->createSrcset($srcset);

        $return =
            '<img ' .
            'src="'. $image->url . '" ' .
            'alt="' . $image->width . "x" . $image->height . '"' .
            'srcset="' . $srcset . '" ' .
            $this->createAttributeString($attributes).
            '>';

        //$event->return = '** '. var_dump($event); die() . '**';
        $event->return = $return;
        //$event->return = '** '. $event->object->url . '**';
    }

    private function createSizeArray($options) {
        $return = $this->defaultSizeArray;

        if ( isset($options['xs']) && is_numeric($options['xs']) ){   $return['xs'] = $options['xs'];          }
        if ( isset($options['sm']) && is_numeric($options['sm']) ){   $return['sm'] = $options['sm'];          }
        if ( isset($options['md']) && is_numeric($options['md']) ){   $return['md'] = $options['md'];          }
        if ( isset($options['lg']) && is_numeric($options['lg']) ){   $return['lg'] = $options['lg'];          }
        if ( isset($options['xl']) && is_numeric($options['xl']) ){   $return['xl'] = $options['xl'];          }

        if ( isset($options['xs']) && $options['xs'] == false ) {   unset($return['xs']);   }
        if ( isset($options['sm']) && $options['xs'] == false ) {   unset($return['sm']);   }
        if ( isset($options['md']) && $options['xs'] == false ) {   unset($return['md']);   }
        if ( isset($options['lg']) && $options['xs'] == false ) {   unset($return['lg']);   }
        if ( isset($options['xl']) && $options['xs'] == false ) {   unset($return['xl']);   }

        if ( isset($options['xs']) && is_object($options['xs']) ) {   $return['xs'] = $options['xs']->size($this->defaultSizeArray['xs'], 0, array('quality'=>15))->url .' '. $options['xs']->width . "w";   }
        if ( isset($options['sm']) && is_object($options['sm']) ) {   $return['sm'] = $options['sm']->size($this->defaultSizeArray['sm'], 0, array('quality'=>15))->url .' '. $options['sm']->width . "w";   }
        if ( isset($options['md']) && is_object($options['md']) ) {   $return['md'] = $options['md']->size($this->defaultSizeArray['md'], 0, array('quality'=>15))->url .' '. $options['md']->width . "w";   }
        if ( isset($options['lg']) && is_object($options['lg']) ) {   $return['lg'] = $options['lg']->size($this->defaultSizeArray['lg'], 0, array('quality'=>15))->url .' '. $options['lg']->width . "w";   }
        if ( isset($options['xl']) && is_object($options['xl']) ) {   $return['xl'] = $options['xl']->size($this->defaultSizeArray['xl'], 0, array('quality'=>15))->url .' '. $options['xl']->width . "w";   }

        return $return;
    }

    private function createSrcset($sizes){
        //$return = '** '. var_dump($sizes[0]); die() . '**';

        return implode(", ", $sizes);
    }

    private function createAttributeString($attributes){
        return implode(" ", $attributes);
    }

    private $defaultSizeArray = array(
        'xs' => 768,
        'sm' => 992,
        'md' => 1200,
        'lg' => 1600,
        'xl' => 1920
    );

    private function useModule(){
        return true;
    }

}

